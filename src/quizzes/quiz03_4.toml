[[questions]]
type = "ShortAnswer"
prompt.prompt = """
Supongamos una lista doblemente enlazada circular. ¿Cuáles de los siguientes afirmaciones son ciertas para cualquier nodo `n`?

1. `n->next->next = n`

2. `n->next != nullptr`

3. `n->next->prev == n`

Indica tu respuesta con los números de las opciones válidas separados por espacios y de menor a mayor (por ejemplo, `1 3`)
"""
answer.answer = "2 3"
id = "ab4d7ec5-da93-4c66-ab5d-19b0db311fc6"


[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Supongamos que quiero imprimir el contenido de una lista que está implementada mediante una lista circular doblemente enlazada con nodo fantasma. Supongamos que tengo una variable `current` que va iterando sobre los nodos de esta lista, mientras va imprimiendo el contenido de cada uno de ellos. ¿Dónde comienza y dónde termina la iteración?
"""
prompt.distractors = [
"Empieza en `head->next` y termina cuando `current == nullptr`.",
"Empieza en `head` y termina cuando `current == head`.",
"Empieza en `head` y termina cuando `current == nullptr`."
]
answer.answer = "Empieza en `head->next` y termina cuando `current == head`."
id = "d6f7ca70-eff2-46a7-a4e9-3d4c483b26bb"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
Partiendo de una lista doblemente enlazada con puntero last al último elemento, conectamos los nodos primero y último con el fin de obtener una lista circular. ¿Qué mejoras obtenemos?

1. Algunas de las operaciones mejoran en términos de coste asintótico.

2. Podemos eliminar el atributo `last` de la clase, pues ya no es necesario.

3. No necesitamos distinguir casos sobre si estamos eliminando uno de los extremos de la lista.

4. No necesitamos nodo fantasma. La implementación es igual de simple (en términos de distinciones de casos) sin él.

5. Ninguno de los punteros de la cadena es `nullptr`.

6. La operación `at(i)` para obtener el i-ésimo elemento de la lista tiene coste constante.

7. La inserción en cualquiera de los extremos de la lista tiene coste constante.

8. Podemos recorrer los elementos de la lista en coste constante.


Indica tu respuesta con los números de las opciones válidas separados por espacios y de menor a mayor (por ejemplo, `1 3 4`)
"""
answer.answer = "2 3 5 7"

context = """
Las listas circulares pueden implementar las operaciones al mismo coste que las listas doblemente enlazadas con puntero `last`. La ventaja de las listas circulares es que las implementaciones son más simples.

El nodo fantasma sigue siendo necesario para no distinguir casos especiales en los que la lista está vacía.

La operación `at(i)` sigue requiriendo recorrer todos los nodos hasta el `i`-ésimo.
"""
id = "faefb030-3956-4046-a565-4c7c32e9e413"


[[questions]]
type = "MultipleChoice"
prompt.prompt = """
En una lista doblemente enlazada circular es posible tener algún nodo cuyo puntero `next` o `prev` es igual a `nullptr`.
"""
prompt.distractors = [
"Verdadero, independientemente de si la lista está vacía o no vacía.",
"Verdadero, si la lista está vacía.",
]
answer.answer = "Falso"
id = "fd3cb6c6-5141-4e72-8bf1-5eb28466ce9f"

[[questions]]
type = "ShortAnswer"
prompt.prompt = """
Supongamos una lista doblemente enlazada circular. ¿Cuáles de las siguientes operaciones **no** tienen coste constante en tiempo?

1. `display`

2. `push_back`

3. `push_front`

4. `at`

Indica tu respuesta con los números de las opciones válidas separados por espacios y de menor a mayor (por ejemplo, `1 3 4`)
"""
answer.answer = "1 4"
id = "d3abbea4-c90d-4e68-ba3a-b56b05cd73fd"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """

Supongamos que tenemos un puntero `p` no nulo que apunta a un nodo de una lista doblemente enlazada circular. Supongamos que `q` es un puntero que apunta a un nodo que no pertenece a la lista anterior. Queremos insertar el nodo apuntado por `q` en la lista, justo después del nodo apuntado por `p`. El siguiente código realiza esta tarea correctamente:

```cpp
p->next->prev = q;
q->next = p->next;
p->next = q;
q->prev = p;
```
"""
prompt.distractors = ["Falso"]
answer.answer = "Verdadero"
id = "b81029f1-937c-495c-860f-2a0de5ae010a"


[[questions]]
type = "MultipleChoice"
prompt.prompt = """

Supongamos una lista enlazada doble **no circular** con nodo fantasma. Alguno de los nodos tiene su puntero `prev` a `nullptr`.

"""
prompt.distractors = ["Falso"]
answer.answer = "Verdadero"

context = "Concretamente, el nodo fantasma no tiene sucesor, ya que es una lista no circular."
id = "336c113a-43af-45dc-a409-e50dd1431f3f"


